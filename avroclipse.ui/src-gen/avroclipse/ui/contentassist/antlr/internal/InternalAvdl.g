/*
 * generated by Xtext
 */
grammar InternalAvdl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package avroclipse.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package avroclipse.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import avroclipse.services.AvdlGrammarAccess;

}

@parser::members {
 
 	private AvdlGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AvdlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAvdlFile
entryRuleAvdlFile 
:
{ before(grammarAccess.getAvdlFileRule()); }
	 ruleAvdlFile
{ after(grammarAccess.getAvdlFileRule()); } 
	 EOF 
;

// Rule AvdlFile
ruleAvdlFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAvdlFileAccess().getAlternatives()); }
(rule__AvdlFile__Alternatives)*
{ after(grammarAccess.getAvdlFileAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProtocol
entryRuleProtocol 
:
{ before(grammarAccess.getProtocolRule()); }
	 ruleProtocol
{ after(grammarAccess.getProtocolRule()); } 
	 EOF 
;

// Rule Protocol
ruleProtocol
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProtocolAccess().getGroup()); }
(rule__Protocol__Group__0)
{ after(grammarAccess.getProtocolAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRPCMessage
entryRuleRPCMessage 
:
{ before(grammarAccess.getRPCMessageRule()); }
	 ruleRPCMessage
{ after(grammarAccess.getRPCMessageRule()); } 
	 EOF 
;

// Rule RPCMessage
ruleRPCMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRPCMessageAccess().getGroup()); }
(rule__RPCMessage__Group__0)
{ after(grammarAccess.getRPCMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getGroup()); }
(rule__Argument__Group__0)
{ after(grammarAccess.getArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnTypeLink
entryRuleReturnTypeLink 
:
{ before(grammarAccess.getReturnTypeLinkRule()); }
	 ruleReturnTypeLink
{ after(grammarAccess.getReturnTypeLinkRule()); } 
	 EOF 
;

// Rule ReturnTypeLink
ruleReturnTypeLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnTypeLinkAccess().getAlternatives()); }
(rule__ReturnTypeLink__Alternatives)
{ after(grammarAccess.getReturnTypeLinkAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVoidTypeLink
entryRuleVoidTypeLink 
:
{ before(grammarAccess.getVoidTypeLinkRule()); }
	 ruleVoidTypeLink
{ after(grammarAccess.getVoidTypeLinkRule()); } 
	 EOF 
;

// Rule VoidTypeLink
ruleVoidTypeLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoidTypeLinkAccess().getTargetAssignment()); }
(rule__VoidTypeLink__TargetAssignment)
{ after(grammarAccess.getVoidTypeLinkAccess().getTargetAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDef
entryRuleTypeDef 
:
{ before(grammarAccess.getTypeDefRule()); }
	 ruleTypeDef
{ after(grammarAccess.getTypeDefRule()); } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefAccess().getGroup()); }
(rule__TypeDef__Group__0)
{ after(grammarAccess.getTypeDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleErrorType
entryRuleErrorType 
:
{ before(grammarAccess.getErrorTypeRule()); }
	 ruleErrorType
{ after(grammarAccess.getErrorTypeRule()); } 
	 EOF 
;

// Rule ErrorType
ruleErrorType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getErrorTypeAccess().getGroup()); }
(rule__ErrorType__Group__0)
{ after(grammarAccess.getErrorTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordType
entryRuleRecordType 
:
{ before(grammarAccess.getRecordTypeRule()); }
	 ruleRecordType
{ after(grammarAccess.getRecordTypeRule()); } 
	 EOF 
;

// Rule RecordType
ruleRecordType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordTypeAccess().getGroup()); }
(rule__RecordType__Group__0)
{ after(grammarAccess.getRecordTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldType
entryRuleFieldType 
:
{ before(grammarAccess.getFieldTypeRule()); }
	 ruleFieldType
{ after(grammarAccess.getFieldTypeRule()); } 
	 EOF 
;

// Rule FieldType
ruleFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldTypeAccess().getAlternatives()); }
(rule__FieldType__Alternatives)
{ after(grammarAccess.getFieldTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleFieldType
entryRuleSimpleFieldType 
:
{ before(grammarAccess.getSimpleFieldTypeRule()); }
	 ruleSimpleFieldType
{ after(grammarAccess.getSimpleFieldTypeRule()); } 
	 EOF 
;

// Rule SimpleFieldType
ruleSimpleFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleFieldTypeAccess().getTypeAssignment()); }
(rule__SimpleFieldType__TypeAssignment)
{ after(grammarAccess.getSimpleFieldTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnionFieldType
entryRuleUnionFieldType 
:
{ before(grammarAccess.getUnionFieldTypeRule()); }
	 ruleUnionFieldType
{ after(grammarAccess.getUnionFieldTypeRule()); } 
	 EOF 
;

// Rule UnionFieldType
ruleUnionFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getGroup()); }
(rule__UnionFieldType__Group__0)
{ after(grammarAccess.getUnionFieldTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayFieldType
entryRuleArrayFieldType 
:
{ before(grammarAccess.getArrayFieldTypeRule()); }
	 ruleArrayFieldType
{ after(grammarAccess.getArrayFieldTypeRule()); } 
	 EOF 
;

// Rule ArrayFieldType
ruleArrayFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getGroup()); }
(rule__ArrayFieldType__Group__0)
{ after(grammarAccess.getArrayFieldTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapFieldType
entryRuleMapFieldType 
:
{ before(grammarAccess.getMapFieldTypeRule()); }
	 ruleMapFieldType
{ after(grammarAccess.getMapFieldTypeRule()); } 
	 EOF 
;

// Rule MapFieldType
ruleMapFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapFieldTypeAccess().getGroup()); }
(rule__MapFieldType__Group__0)
{ after(grammarAccess.getMapFieldTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeLink
entryRuleTypeLink 
:
{ before(grammarAccess.getTypeLinkRule()); }
	 ruleTypeLink
{ after(grammarAccess.getTypeLinkRule()); } 
	 EOF 
;

// Rule TypeLink
ruleTypeLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeLinkAccess().getAlternatives()); }
(rule__TypeLink__Alternatives)
{ after(grammarAccess.getTypeLinkAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimativeTypeLink
entryRulePrimativeTypeLink 
:
{ before(grammarAccess.getPrimativeTypeLinkRule()); }
	 rulePrimativeTypeLink
{ after(grammarAccess.getPrimativeTypeLinkRule()); } 
	 EOF 
;

// Rule PrimativeTypeLink
rulePrimativeTypeLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetAssignment()); }
(rule__PrimativeTypeLink__TargetAssignment)
{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCustomTypeLink
entryRuleCustomTypeLink 
:
{ before(grammarAccess.getCustomTypeLinkRule()); }
	 ruleCustomTypeLink
{ after(grammarAccess.getCustomTypeLinkRule()); } 
	 EOF 
;

// Rule CustomTypeLink
ruleCustomTypeLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCustomTypeLinkAccess().getTargetAssignment()); }
(rule__CustomTypeLink__TargetAssignment)
{ after(grammarAccess.getCustomTypeLinkAccess().getTargetAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFixedType
entryRuleFixedType 
:
{ before(grammarAccess.getFixedTypeRule()); }
	 ruleFixedType
{ after(grammarAccess.getFixedTypeRule()); } 
	 EOF 
;

// Rule FixedType
ruleFixedType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFixedTypeAccess().getGroup()); }
(rule__FixedType__Group__0)
{ after(grammarAccess.getFixedTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumType
entryRuleEnumType 
:
{ before(grammarAccess.getEnumTypeRule()); }
	 ruleEnumType
{ after(grammarAccess.getEnumTypeRule()); } 
	 EOF 
;

// Rule EnumType
ruleEnumType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumTypeAccess().getGroup()); }
(rule__EnumType__Group__0)
{ after(grammarAccess.getEnumTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValues
entryRuleValues 
:
{ before(grammarAccess.getValuesRule()); }
	 ruleValues
{ after(grammarAccess.getValuesRule()); } 
	 EOF 
;

// Rule Values
ruleValues
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuesAccess().getGroup()); }
(rule__Values__Group__0)
{ after(grammarAccess.getValuesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArray
entryRuleArray 
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayAccess().getGroup()); }
(rule__Array__Group__0)
{ after(grammarAccess.getArrayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNull
entryRuleNull 
:
{ before(grammarAccess.getNullRule()); }
	 ruleNull
{ after(grammarAccess.getNullRule()); } 
	 EOF 
;

// Rule Null
ruleNull
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullAccess().getValAssignment()); }
(rule__Null__ValAssignment)
{ after(grammarAccess.getNullAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValAssignment()); }
(rule__StringValue__ValAssignment)
{ after(grammarAccess.getStringValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValAssignment()); }
(rule__IntValue__ValAssignment)
{ after(grammarAccess.getIntValueAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEscapableId
entryRuleEscapableId 
:
{ before(grammarAccess.getEscapableIdRule()); }
	 ruleEscapableId
{ after(grammarAccess.getEscapableIdRule()); } 
	 EOF 
;

// Rule EscapableId
ruleEscapableId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEscapableIdAccess().getAlternatives()); }
(rule__EscapableId__Alternatives)
{ after(grammarAccess.getEscapableIdAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReservedKeyWords
entryRuleReservedKeyWords 
:
{ before(grammarAccess.getReservedKeyWordsRule()); }
	 ruleReservedKeyWords
{ after(grammarAccess.getReservedKeyWordsRule()); } 
	 EOF 
;

// Rule ReservedKeyWords
ruleReservedKeyWords
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReservedKeyWordsAccess().getAlternatives()); }
(rule__ReservedKeyWords__Alternatives)
{ after(grammarAccess.getReservedKeyWordsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAN
entryRuleAN 
:
{ before(grammarAccess.getANRule()); }
	 ruleAN
{ after(grammarAccess.getANRule()); } 
	 EOF 
;

// Rule AN
ruleAN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANAccess().getGroup()); }
(rule__AN__Group__0)
{ after(grammarAccess.getANAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegativeInt
entryRuleNegativeInt 
:
{ before(grammarAccess.getNegativeIntRule()); }
	 ruleNegativeInt
{ after(grammarAccess.getNegativeIntRule()); } 
	 EOF 
;

// Rule NegativeInt
ruleNegativeInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegativeIntAccess().getGroup()); }
(rule__NegativeInt__Group__0)
{ after(grammarAccess.getNegativeIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ImportType
ruleImportType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportTypeAccess().getAlternatives()); }
(rule__ImportType__Alternatives)
{ after(grammarAccess.getImportTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AvdlFile__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvdlFileAccess().getImportsAssignment_0()); }
(rule__AvdlFile__ImportsAssignment_0)
{ after(grammarAccess.getAvdlFileAccess().getImportsAssignment_0()); }
)

    |(
{ before(grammarAccess.getAvdlFileAccess().getProtocolsAssignment_1()); }
(rule__AvdlFile__ProtocolsAssignment_1)
{ after(grammarAccess.getAvdlFileAccess().getProtocolsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getTypeDefParserRuleCall_0()); }
	ruleTypeDef
{ after(grammarAccess.getElementAccess().getTypeDefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getRPCMessageParserRuleCall_1()); }
	ruleRPCMessage
{ after(grammarAccess.getElementAccess().getRPCMessageParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnTypeLink__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeLinkAccess().getVoidTypeLinkParserRuleCall_0()); }
	ruleVoidTypeLink
{ after(grammarAccess.getReturnTypeLinkAccess().getVoidTypeLinkParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReturnTypeLinkAccess().getTypeLinkParserRuleCall_1()); }
	ruleTypeLink
{ after(grammarAccess.getReturnTypeLinkAccess().getTypeLinkParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_0()); }
	ruleEnumType
{ after(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getFixedTypeParserRuleCall_1()); }
	ruleFixedType
{ after(grammarAccess.getTypeAccess().getFixedTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_2()); }
	ruleRecordType
{ after(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getErrorTypeParserRuleCall_3()); }
	ruleErrorType
{ after(grammarAccess.getTypeAccess().getErrorTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getSimpleFieldTypeParserRuleCall_0()); }
	ruleSimpleFieldType
{ after(grammarAccess.getFieldTypeAccess().getSimpleFieldTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getUnionFieldTypeParserRuleCall_1()); }
	ruleUnionFieldType
{ after(grammarAccess.getFieldTypeAccess().getUnionFieldTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getArrayFieldTypeParserRuleCall_2()); }
	ruleArrayFieldType
{ after(grammarAccess.getFieldTypeAccess().getArrayFieldTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getMapFieldTypeParserRuleCall_3()); }
	ruleMapFieldType
{ after(grammarAccess.getFieldTypeAccess().getMapFieldTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLink__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeLinkAccess().getPrimativeTypeLinkParserRuleCall_0()); }
	rulePrimativeTypeLink
{ after(grammarAccess.getTypeLinkAccess().getPrimativeTypeLinkParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeLinkAccess().getCustomTypeLinkParserRuleCall_1()); }
	ruleCustomTypeLink
{ after(grammarAccess.getTypeLinkAccess().getCustomTypeLinkParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimativeTypeLink__TargetAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetNullKeyword_0_0()); }

	'null' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetNullKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetIntKeyword_0_1()); }

	'int' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetIntKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetLongKeyword_0_2()); }

	'long' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetLongKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetFloatKeyword_0_3()); }

	'float' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetFloatKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetDoubleKeyword_0_4()); }

	'double' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetDoubleKeyword_0_4()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetBytesKeyword_0_5()); }

	'bytes' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetBytesKeyword_0_5()); }
)

    |(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetStringKeyword_0_6()); }

	'string' 

{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetStringKeyword_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueAssignment_1_0()); }
(rule__Values__ValueAssignment_1_0)
{ after(grammarAccess.getValuesAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getValuesAccess().getGroup_1_1()); }
(rule__Values__Group_1_1__0)
{ after(grammarAccess.getValuesAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
(	ruleArray)
{ after(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getIntValueParserRuleCall_2()); }
	ruleIntValue
{ after(grammarAccess.getValueAccess().getIntValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNullParserRuleCall_3()); }
	ruleNull
{ after(grammarAccess.getValueAccess().getNullParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0_0()); }
	RULE_INT
{ after(grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getIntValueAccess().getValNegativeIntParserRuleCall_0_1()); }
	ruleNegativeInt
{ after(grammarAccess.getIntValueAccess().getValNegativeIntParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EscapableId__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscapableIdAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getEscapableIdAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEscapableIdAccess().getGroup_1()); }
(rule__EscapableId__Group_1__0)
{ after(grammarAccess.getEscapableIdAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReservedKeyWords__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReservedKeyWordsAccess().getRecordKeyword_0()); }

	'record' 

{ after(grammarAccess.getReservedKeyWordsAccess().getRecordKeyword_0()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getFixedKeyword_1()); }

	'fixed' 

{ after(grammarAccess.getReservedKeyWordsAccess().getFixedKeyword_1()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getEnumKeyword_2()); }

	'enum' 

{ after(grammarAccess.getReservedKeyWordsAccess().getEnumKeyword_2()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getMapKeyword_3()); }

	'map' 

{ after(grammarAccess.getReservedKeyWordsAccess().getMapKeyword_3()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getArrayKeyword_4()); }

	'array' 

{ after(grammarAccess.getReservedKeyWordsAccess().getArrayKeyword_4()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getUnionKeyword_5()); }

	'union' 

{ after(grammarAccess.getReservedKeyWordsAccess().getUnionKeyword_5()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getErrorKeyword_6()); }

	'error' 

{ after(grammarAccess.getReservedKeyWordsAccess().getErrorKeyword_6()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getProtocolKeyword_7()); }

	'protocol' 

{ after(grammarAccess.getReservedKeyWordsAccess().getProtocolKeyword_7()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getOnewayKeyword_8()); }

	'oneway' 

{ after(grammarAccess.getReservedKeyWordsAccess().getOnewayKeyword_8()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getImportKeyword_9()); }

	'import' 

{ after(grammarAccess.getReservedKeyWordsAccess().getImportKeyword_9()); }
)

    |(
{ before(grammarAccess.getReservedKeyWordsAccess().getThrowsKeyword_10()); }

	'throws' 

{ after(grammarAccess.getReservedKeyWordsAccess().getThrowsKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportTypeAccess().getIDLEnumLiteralDeclaration_0()); }
(	'idl' 
)
{ after(grammarAccess.getImportTypeAccess().getIDLEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getImportTypeAccess().getPROTOCOLEnumLiteralDeclaration_1()); }
(	'protocol' 
)
{ after(grammarAccess.getImportTypeAccess().getPROTOCOLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getImportTypeAccess().getSCHEMAEnumLiteralDeclaration_2()); }
(	'schema' 
)
{ after(grammarAccess.getImportTypeAccess().getSCHEMAEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getTypeAssignment_1()); }
(rule__Import__TypeAssignment_1)
{ after(grammarAccess.getImportAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportUriAssignment_2()); }
(rule__Import__ImportUriAssignment_2)
{ after(grammarAccess.getImportAccess().getImportUriAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getImportAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Protocol__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__0__Impl
	rule__Protocol__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getAnnotationsAssignment_0()); }
(rule__Protocol__AnnotationsAssignment_0)*
{ after(grammarAccess.getProtocolAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__1__Impl
	rule__Protocol__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getProtocolKeyword_1()); }

	'protocol' 

{ after(grammarAccess.getProtocolAccess().getProtocolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__2__Impl
	rule__Protocol__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getNameAssignment_2()); }
(rule__Protocol__NameAssignment_2)
{ after(grammarAccess.getProtocolAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__3__Impl
	rule__Protocol__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__4__Impl
	rule__Protocol__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getElementsAssignment_4()); }
(rule__Protocol__ElementsAssignment_4)*
{ after(grammarAccess.getProtocolAccess().getElementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Protocol__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Protocol__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__RPCMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__0__Impl
	rule__RPCMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getReturnTypeAssignment_0()); }
(rule__RPCMessage__ReturnTypeAssignment_0)
{ after(grammarAccess.getRPCMessageAccess().getReturnTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__1__Impl
	rule__RPCMessage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getNameAssignment_1()); }
(rule__RPCMessage__NameAssignment_1)
{ after(grammarAccess.getRPCMessageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__2__Impl
	rule__RPCMessage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getRPCMessageAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__3__Impl
	rule__RPCMessage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getGroup_3()); }
(rule__RPCMessage__Group_3__0)*
{ after(grammarAccess.getRPCMessageAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__4__Impl
	rule__RPCMessage__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getRPCMessageAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__5__Impl
	rule__RPCMessage__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getGroup_5()); }
(rule__RPCMessage__Group_5__0)?
{ after(grammarAccess.getRPCMessageAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__6__Impl
	rule__RPCMessage__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getOnewayAssignment_6()); }
(rule__RPCMessage__OnewayAssignment_6)?
{ after(grammarAccess.getRPCMessageAccess().getOnewayAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getRPCMessageAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__RPCMessage__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_3__0__Impl
	rule__RPCMessage__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getArgumentsAssignment_3_0()); }
(rule__RPCMessage__ArgumentsAssignment_3_0)
{ after(grammarAccess.getRPCMessageAccess().getArgumentsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getGroup_3_1()); }
(rule__RPCMessage__Group_3_1__0)*
{ after(grammarAccess.getRPCMessageAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RPCMessage__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_3_1__0__Impl
	rule__RPCMessage__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getRPCMessageAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getArgumentsAssignment_3_1_1()); }
(rule__RPCMessage__ArgumentsAssignment_3_1_1)
{ after(grammarAccess.getRPCMessageAccess().getArgumentsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RPCMessage__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_5__0__Impl
	rule__RPCMessage__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getThrowsKeyword_5_0()); }

	'throws' 

{ after(grammarAccess.getRPCMessageAccess().getThrowsKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RPCMessage__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RPCMessage__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getErrorAssignment_5_1()); }
(rule__RPCMessage__ErrorAssignment_5_1)
{ after(grammarAccess.getRPCMessageAccess().getErrorAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
(rule__Argument__TypeAssignment_0)
{ after(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__1__Impl
	rule__Argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
(rule__Argument__NameAssignment_1)
{ after(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getGroup_2()); }
(rule__Argument__Group_2__0)?
{ after(grammarAccess.getArgumentAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Argument__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_2__0__Impl
	rule__Argument__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getArgumentAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getDefaultAssignment_2_1()); }
(rule__Argument__DefaultAssignment_2_1)
{ after(grammarAccess.getArgumentAccess().getDefaultAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__0__Impl
	rule__TypeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getAnnotationsAssignment_0()); }
(rule__TypeDef__AnnotationsAssignment_0)*
{ after(grammarAccess.getTypeDefAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeAssignment_1()); }
(rule__TypeDef__TypeAssignment_1)
{ after(grammarAccess.getTypeDefAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ErrorType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorType__Group__0__Impl
	rule__ErrorType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getErrorKeyword_0()); }

	'error' 

{ after(grammarAccess.getErrorTypeAccess().getErrorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorType__Group__1__Impl
	rule__ErrorType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getNameAssignment_1()); }
(rule__ErrorType__NameAssignment_1)
{ after(grammarAccess.getErrorTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorType__Group__2__Impl
	rule__ErrorType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getErrorTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorType__Group__3__Impl
	rule__ErrorType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getFieldsAssignment_3()); }
(rule__ErrorType__FieldsAssignment_3)*
{ after(grammarAccess.getErrorTypeAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ErrorType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getErrorTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__0__Impl
	rule__RecordType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRecordKeyword_0()); }

	'record' 

{ after(grammarAccess.getRecordTypeAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__1__Impl
	rule__RecordType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getNameAssignment_1()); }
(rule__RecordType__NameAssignment_1)
{ after(grammarAccess.getRecordTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__2__Impl
	rule__RecordType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__3__Impl
	rule__RecordType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3()); }
(rule__RecordType__FieldsAssignment_3)*
{ after(grammarAccess.getRecordTypeAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getAnnotationsAssignment_0()); }
(rule__Field__AnnotationsAssignment_0)*
{ after(grammarAccess.getFieldAccess().getAnnotationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_1()); }
(rule__Field__TypeAssignment_1)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAnnotationsAssignment_2()); }
(rule__Field__NameAnnotationsAssignment_2)*
{ after(grammarAccess.getFieldAccess().getNameAnnotationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
	rule__Field__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_3()); }
(rule__Field__NameAssignment_3)
{ after(grammarAccess.getFieldAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__4__Impl
	rule__Field__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getGroup_4()); }
(rule__Field__Group_4__0)?
{ after(grammarAccess.getFieldAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getFieldAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Field__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group_4__0__Impl
	rule__Field__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getEqualsSignKeyword_4_0()); }

	'=' 

{ after(grammarAccess.getFieldAccess().getEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getDefaultAssignment_4_1()); }
(rule__Field__DefaultAssignment_4_1)
{ after(grammarAccess.getFieldAccess().getDefaultAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionFieldType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group__0__Impl
	rule__UnionFieldType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getUnionKeyword_0()); }

	'union' 

{ after(grammarAccess.getUnionFieldTypeAccess().getUnionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionFieldType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group__1__Impl
	rule__UnionFieldType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getUnionFieldTypeAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionFieldType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group__2__Impl
	rule__UnionFieldType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getTypesAssignment_2()); }
(rule__UnionFieldType__TypesAssignment_2)
{ after(grammarAccess.getUnionFieldTypeAccess().getTypesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionFieldType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group__3__Impl
	rule__UnionFieldType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getGroup_3()); }
(rule__UnionFieldType__Group_3__0)*
{ after(grammarAccess.getUnionFieldTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionFieldType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getUnionFieldTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnionFieldType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group_3__0__Impl
	rule__UnionFieldType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getUnionFieldTypeAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnionFieldType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnionFieldType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getTypesAssignment_3_1()); }
(rule__UnionFieldType__TypesAssignment_3_1)
{ after(grammarAccess.getUnionFieldTypeAccess().getTypesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayFieldType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayFieldType__Group__0__Impl
	rule__ArrayFieldType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getArrayKeyword_0()); }

	'array' 

{ after(grammarAccess.getArrayFieldTypeAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayFieldType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayFieldType__Group__1__Impl
	rule__ArrayFieldType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getArrayFieldTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayFieldType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayFieldType__Group__2__Impl
	rule__ArrayFieldType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getAnnotationAssignment_2()); }
(rule__ArrayFieldType__AnnotationAssignment_2)?
{ after(grammarAccess.getArrayFieldTypeAccess().getAnnotationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayFieldType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayFieldType__Group__3__Impl
	rule__ArrayFieldType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getTypeAssignment_3()); }
(rule__ArrayFieldType__TypeAssignment_3)
{ after(grammarAccess.getArrayFieldTypeAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayFieldType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayFieldType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getArrayFieldTypeAccess().getGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MapFieldType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapFieldType__Group__0__Impl
	rule__MapFieldType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getMapKeyword_0()); }

	'map' 

{ after(grammarAccess.getMapFieldTypeAccess().getMapKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapFieldType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapFieldType__Group__1__Impl
	rule__MapFieldType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getMapFieldTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapFieldType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapFieldType__Group__2__Impl
	rule__MapFieldType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getAnnotationAssignment_2()); }
(rule__MapFieldType__AnnotationAssignment_2)?
{ after(grammarAccess.getMapFieldTypeAccess().getAnnotationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapFieldType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapFieldType__Group__3__Impl
	rule__MapFieldType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getTypeAssignment_3()); }
(rule__MapFieldType__TypeAssignment_3)
{ after(grammarAccess.getMapFieldTypeAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapFieldType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapFieldType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getMapFieldTypeAccess().getGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FixedType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__0__Impl
	rule__FixedType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getFixedKeyword_0()); }

	'fixed' 

{ after(grammarAccess.getFixedTypeAccess().getFixedKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FixedType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__1__Impl
	rule__FixedType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getNameAssignment_1()); }
(rule__FixedType__NameAssignment_1)
{ after(grammarAccess.getFixedTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FixedType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__2__Impl
	rule__FixedType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFixedTypeAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FixedType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__3__Impl
	rule__FixedType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getSizeAssignment_3()); }
(rule__FixedType__SizeAssignment_3)
{ after(grammarAccess.getFixedTypeAccess().getSizeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FixedType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__4__Impl
	rule__FixedType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFixedTypeAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FixedType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FixedType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getFixedTypeAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__0__Impl
	rule__EnumType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumTypeAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__1__Impl
	rule__EnumType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getNameAssignment_1()); }
(rule__EnumType__NameAssignment_1)
{ after(grammarAccess.getEnumTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__2__Impl
	rule__EnumType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__3__Impl
	rule__EnumType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3()); }
(rule__EnumType__LiteralsAssignment_3)
{ after(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__4__Impl
	rule__EnumType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getGroup_4()); }
(rule__EnumType__Group_4__0)*
{ after(grammarAccess.getEnumTypeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumType__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_4__0__Impl
	rule__EnumType__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getEnumTypeAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumType__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumType__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_4_1()); }
(rule__EnumType__LiteralsAssignment_4_1)
{ after(grammarAccess.getEnumTypeAccess().getLiteralsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
(rule__Annotation__NameAssignment_1)
{ after(grammarAccess.getAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGroup_2()); }
(rule__Annotation__Group_2__0)?
{ after(grammarAccess.getAnnotationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__0__Impl
	rule__Annotation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__1__Impl
	rule__Annotation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getValuesAssignment_2_1()); }
(rule__Annotation__ValuesAssignment_2_1)
{ after(grammarAccess.getAnnotationAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Values__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group__0__Impl
	rule__Values__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValuesAction_0()); }
(

)
{ after(grammarAccess.getValuesAccess().getValuesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Values__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getAlternatives_1()); }
(rule__Values__Alternatives_1)*
{ after(grammarAccess.getValuesAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Values__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group_1_1__0__Impl
	rule__Values__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueAssignment_1_1_0()); }
(rule__Values__ValueAssignment_1_1_0)
{ after(grammarAccess.getValuesAccess().getValueAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Values__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getGroup_1_1_1()); }
(rule__Values__Group_1_1_1__0)*
{ after(grammarAccess.getValuesAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Values__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group_1_1_1__0__Impl
	rule__Values__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getCommaKeyword_1_1_1_0()); }

	',' 

{ after(grammarAccess.getValuesAccess().getCommaKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Values__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Values__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueAssignment_1_1_1_1()); }
(rule__Values__ValueAssignment_1_1_1_1)
{ after(grammarAccess.getValuesAccess().getValueAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Array__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0()); }
(
	'[' 
)
{ after(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getValuesAssignment_1()); }
(rule__Array__ValuesAssignment_1)
{ after(grammarAccess.getArrayAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EscapableId__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EscapableId__Group_1__0__Impl
	rule__EscapableId__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EscapableId__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_0()); }

	'`' 

{ after(grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EscapableId__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EscapableId__Group_1__1__Impl
	rule__EscapableId__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EscapableId__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscapableIdAccess().getReservedKeyWordsParserRuleCall_1_1()); }
	ruleReservedKeyWords
{ after(grammarAccess.getEscapableIdAccess().getReservedKeyWordsParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EscapableId__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EscapableId__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EscapableId__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_2()); }

	'`' 

{ after(grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AN__Group__0__Impl
	rule__AN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getANAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANAccess().getGroup_1()); }
(rule__AN__Group_1__0)*
{ after(grammarAccess.getANAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AN__Group_1__0__Impl
	rule__AN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANAccess().getHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getANAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getANAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegativeInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegativeInt__Group__0__Impl
	rule__NegativeInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegativeIntAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getNegativeIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegativeInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegativeInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegativeIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getNegativeIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__AvdlFile__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvdlFileAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getAvdlFileAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AvdlFile__ProtocolsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAvdlFileAccess().getProtocolsProtocolParserRuleCall_1_0()); }
	ruleProtocol{ after(grammarAccess.getAvdlFileAccess().getProtocolsProtocolParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getTypeImportTypeEnumRuleCall_1_0()); }
	ruleImportType{ after(grammarAccess.getImportAccess().getTypeImportTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportUriAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportUriSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportUriSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getProtocolAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getNameEscapableIdParserRuleCall_2_0()); }
	ruleEscapableId{ after(grammarAccess.getProtocolAccess().getNameEscapableIdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__ElementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getElementsElementParserRuleCall_4_0()); }
	ruleElement{ after(grammarAccess.getProtocolAccess().getElementsElementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__ReturnTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getReturnTypeReturnTypeLinkParserRuleCall_0_0()); }
	ruleReturnTypeLink{ after(grammarAccess.getRPCMessageAccess().getReturnTypeReturnTypeLinkParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getRPCMessageAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__ArgumentsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_0_0()); }
	ruleArgument{ after(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__ArgumentsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_1_1_0()); }
	ruleArgument{ after(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__ErrorAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getErrorErrorTypeCrossReference_5_1_0()); }
(
{ before(grammarAccess.getRPCMessageAccess().getErrorErrorTypeEscapableIdParserRuleCall_5_1_0_1()); }
	ruleEscapableId{ after(grammarAccess.getRPCMessageAccess().getErrorErrorTypeEscapableIdParserRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getRPCMessageAccess().getErrorErrorTypeCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RPCMessage__OnewayAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRPCMessageAccess().getOnewayOnewayKeyword_6_0()); }
(
{ before(grammarAccess.getRPCMessageAccess().getOnewayOnewayKeyword_6_0()); }

	'oneway' 

{ after(grammarAccess.getRPCMessageAccess().getOnewayOnewayKeyword_6_0()); }
)

{ after(grammarAccess.getRPCMessageAccess().getOnewayOnewayKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeTypeLinkParserRuleCall_0_0()); }
	ruleTypeLink{ after(grammarAccess.getArgumentAccess().getTypeTypeLinkParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getArgumentAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__DefaultAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getDefaultValueParserRuleCall_2_1_0()); }
	ruleValue{ after(grammarAccess.getArgumentAccess().getDefaultValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VoidTypeLink__TargetAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0()); }
(
{ before(grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0()); }
)

{ after(grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getTypeDefAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getErrorTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
	ruleField{ after(grammarAccess.getErrorTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getRecordTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
	ruleField{ after(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__AnnotationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
	ruleAnnotation{ after(grammarAccess.getFieldAccess().getAnnotationsAnnotationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_1_0()); }
	ruleFieldType{ after(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAnnotationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAnnotationsAnnotationParserRuleCall_2_0()); }
	ruleAnnotation{ after(grammarAccess.getFieldAccess().getNameAnnotationsAnnotationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameEscapableIdParserRuleCall_3_0()); }
	ruleEscapableId{ after(grammarAccess.getFieldAccess().getNameEscapableIdParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__DefaultAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getDefaultValueParserRuleCall_4_1_0()); }
	ruleValue{ after(grammarAccess.getFieldAccess().getDefaultValueParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleFieldType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleFieldTypeAccess().getTypeTypeLinkParserRuleCall_0()); }
	ruleTypeLink{ after(grammarAccess.getSimpleFieldTypeAccess().getTypeTypeLinkParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__TypesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_2_0()); }
	ruleTypeLink{ after(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionFieldType__TypesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_3_1_0()); }
	ruleTypeLink{ after(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__AnnotationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); }
	ruleAnnotation{ after(grammarAccess.getArrayFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayFieldType__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); }
	ruleTypeLink{ after(grammarAccess.getArrayFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__AnnotationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); }
	ruleAnnotation{ after(grammarAccess.getMapFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapFieldType__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); }
	ruleTypeLink{ after(grammarAccess.getMapFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimativeTypeLink__TargetAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimativeTypeLinkAccess().getTargetAlternatives_0()); }
(rule__PrimativeTypeLink__TargetAlternatives_0)
{ after(grammarAccess.getPrimativeTypeLinkAccess().getTargetAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTypeLink__TargetAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeLinkAccess().getTargetTypeCrossReference_0()); }
(
{ before(grammarAccess.getCustomTypeLinkAccess().getTargetTypeEscapableIdParserRuleCall_0_1()); }
	ruleEscapableId{ after(grammarAccess.getCustomTypeLinkAccess().getTargetTypeEscapableIdParserRuleCall_0_1()); }
)
{ after(grammarAccess.getCustomTypeLinkAccess().getTargetTypeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getFixedTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FixedType__SizeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixedTypeAccess().getSizeINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getFixedTypeAccess().getSizeINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
	ruleEscapableId{ after(grammarAccess.getEnumTypeAccess().getNameEscapableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__LiteralsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumType__LiteralsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_4_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameANParserRuleCall_1_0()); }
	ruleAN{ after(grammarAccess.getAnnotationAccess().getNameANParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getValuesValuesParserRuleCall_2_1_0()); }
	ruleValues{ after(grammarAccess.getAnnotationAccess().getValuesValuesParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Values__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueArrayParserRuleCall_1_0_0()); }
	ruleArray{ after(grammarAccess.getValuesAccess().getValueArrayParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Values__ValueAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_0_0()); }
	ruleValue{ after(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Values__ValueAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_1_1_0()); }
	ruleValue{ after(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayAccess().getValuesValuesParserRuleCall_1_0()); }
	ruleValues{ after(grammarAccess.getArrayAccess().getValuesValuesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Null__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullAccess().getValNullKeyword_0()); }
(
{ before(grammarAccess.getNullAccess().getValNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNullAccess().getValNullKeyword_0()); }
)

{ after(grammarAccess.getNullAccess().getValNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValAlternatives_0()); }
(rule__IntValue__ValAlternatives_0)
{ after(grammarAccess.getIntValueAccess().getValAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


