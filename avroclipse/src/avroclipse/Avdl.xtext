grammar avroclipse.Avdl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate avdl "http://avroclipse/Avdl"

AvdlFile:
	(imports+=Import | protocols+=Protocol)*;

Import:
	'import' type=ImportType importUri=STRING ';';

Protocol:
	annotations+=Annotation*
	'protocol' name=EscapableId '{'
		elements+=Element*
	'}';
	
Element:
	TypeDef | RPCMessage
;

RPCMessage:
	returnType=ReturnTypeLink name=EscapableId '(' (arguments+=Argument (',' arguments+=Argument)*)* ')' ('throws'
	error=[ErrorType|EscapableId])? (oneway?='oneway')? ';';

Argument:
	type=TypeLink name=EscapableId ('=' default=Value)?;

ReturnTypeLink:
	VoidTypeLink | TypeLink;

VoidTypeLink:
	target='void';

TypeDef:
	annotations+=Annotation* type=Type;

Type:
	EnumType | FixedType | RecordType | ErrorType;

ErrorType:
	'error' name=EscapableId '{'
		fields+=Field*
	'}';

RecordType:
	'record' name=EscapableId '{'
		fields+=Field*
	'}';

Field:
	annotations+=Annotation* type=FieldType nameAnnotations+=Annotation* name=EscapableId ('=' default=Value)? ';';

FieldType:
	SimpleFieldType | UnionFieldType | ArrayFieldType | MapFieldType;

SimpleFieldType:
	type=TypeLink;
	
UnionFieldType:
	'union' '{' types+=TypeLink (',' types+=TypeLink)* '}';

ArrayFieldType:
	'array' '<' annotation=Annotation? type=TypeLink '>';

MapFieldType:
	'map' '<' annotation=Annotation? type=TypeLink '>';

TypeLink:
	PrimativeTypeLink | CustomTypeLink;

PrimativeTypeLink:
	target=('null' | 'int' | 'long' | 'float' | 'double' | 'bytes' | 'string');

CustomTypeLink:
	target=[Type|EscapableId];

FixedType:
	'fixed' name=EscapableId '(' size=INT ')' ';';

EnumType:
	'enum' name=EscapableId '{'
		literals+=ID (',' literals+=ID)*
	'}';

Annotation:
	name=AN ('(' values=Values ')')?;

Values:
	{Values}
	(value+=Array | value+=Value (',' value+=Value)*)*;

Array:
	=> '[' values=Values ']';

Value:
	StringValue | Array | IntValue | Null;

Null:
	val='null';

StringValue:
	val=STRING;

IntValue:
	val=(INT|NegativeInt);

EscapableId:
	ID | '`' ReservedKeyWords '`'
;

ReservedKeyWords:
	'record' | 'fixed' | 'enum' | 'map' | 'array' | 'union' | 'error' | 'protocol' | 'oneway' | 'import' | 'throws';

AN:
	'@' ID ('-' ID)*;
	
NegativeInt returns ecore::EInt:
	'-' INT;

enum ImportType:
	IDL='idl' |
	PROTOCOL='protocol' |
	SCHEMA='schema';
