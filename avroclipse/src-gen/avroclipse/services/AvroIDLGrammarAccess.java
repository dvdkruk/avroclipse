/*
 * generated by Xtext
 */
package avroclipse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AvroIDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AvroIDLFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AvroIDLFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cProtocolsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProtocolsProtocolParserRuleCall_1_0 = (RuleCall)cProtocolsAssignment_1.eContents().get(0);
		
		//AvroIDLFile:
		//	imports+=Import* protocols+=Protocol?;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* protocols+=Protocol?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//protocols+=Protocol?
		public Assignment getProtocolsAssignment_1() { return cProtocolsAssignment_1; }

		//Protocol
		public RuleCall getProtocolsProtocolParserRuleCall_1_0() { return cProtocolsProtocolParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeImportTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	"import" type=ImportType importURI=STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" type=ImportType importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//type=ImportType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ImportType
		public RuleCall getTypeImportTypeEnumRuleCall_1_0() { return cTypeImportTypeEnumRuleCall_1_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEscapableIdParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Protocol:
		//	annotations+=Annotation* "protocol" name=EscapableId "{" elements+=Element* "}";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "protocol" name=EscapableId "{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"protocol"
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }

		//name=EscapableId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_2_0() { return cNameEscapableIdParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=Element*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//Element
		public RuleCall getElementsElementParserRuleCall_4_0() { return cElementsElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRPCMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	TypeDef | RPCMessage;
		@Override public ParserRule getRule() { return rule; }

		//TypeDef | RPCMessage
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//RPCMessage
		public RuleCall getRPCMessageParserRuleCall_1() { return cRPCMessageParserRuleCall_1; }
	}

	public class RPCMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RPCMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeReturnTypeLinkParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cThrowsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cErrorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cErrorErrorTypeCrossReference_5_1_0 = (CrossReference)cErrorAssignment_5_1.eContents().get(0);
		private final RuleCall cErrorErrorTypeEscapableIdParserRuleCall_5_1_0_1 = (RuleCall)cErrorErrorTypeCrossReference_5_1_0.eContents().get(1);
		private final Assignment cOnewayAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cOnewayOnewayKeyword_6_0 = (Keyword)cOnewayAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RPCMessage:
		//	returnType=ReturnTypeLink name=EscapableId "(" (arguments+=Argument ("," arguments+=Argument)*)* ")" ("throws"
		//	error=[ErrorType|EscapableId])? oneway?="oneway"? ";";
		@Override public ParserRule getRule() { return rule; }

		//returnType=ReturnTypeLink name=EscapableId "(" (arguments+=Argument ("," arguments+=Argument)*)* ")" ("throws"
		//error=[ErrorType|EscapableId])? oneway?="oneway"? ";"
		public Group getGroup() { return cGroup; }

		//returnType=ReturnTypeLink
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }

		//ReturnTypeLink
		public RuleCall getReturnTypeReturnTypeLinkParserRuleCall_0_0() { return cReturnTypeReturnTypeLinkParserRuleCall_0_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Argument ("," arguments+=Argument)*)*
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_0_0() { return cArgumentsArgumentParserRuleCall_3_0_0; }

		//("," arguments+=Argument)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_1_1_0() { return cArgumentsArgumentParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("throws" error=[ErrorType|EscapableId])?
		public Group getGroup_5() { return cGroup_5; }

		//"throws"
		public Keyword getThrowsKeyword_5_0() { return cThrowsKeyword_5_0; }

		//error=[ErrorType|EscapableId]
		public Assignment getErrorAssignment_5_1() { return cErrorAssignment_5_1; }

		//[ErrorType|EscapableId]
		public CrossReference getErrorErrorTypeCrossReference_5_1_0() { return cErrorErrorTypeCrossReference_5_1_0; }

		//EscapableId
		public RuleCall getErrorErrorTypeEscapableIdParserRuleCall_5_1_0_1() { return cErrorErrorTypeEscapableIdParserRuleCall_5_1_0_1; }

		//oneway?="oneway"?
		public Assignment getOnewayAssignment_6() { return cOnewayAssignment_6; }

		//"oneway"
		public Keyword getOnewayOnewayKeyword_6_0() { return cOnewayOnewayKeyword_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeLinkParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultValueParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		//Argument:
		//	type=TypeLink name=EscapableId ("=" default=Value)?;
		@Override public ParserRule getRule() { return rule; }

		//type=TypeLink name=EscapableId ("=" default=Value)?
		public Group getGroup() { return cGroup; }

		//type=TypeLink
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeLink
		public RuleCall getTypeTypeLinkParserRuleCall_0_0() { return cTypeTypeLinkParserRuleCall_0_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//("=" default=Value)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//default=Value
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }

		//Value
		public RuleCall getDefaultValueParserRuleCall_2_1_0() { return cDefaultValueParserRuleCall_2_1_0; }
	}

	public class ReturnTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnTypeLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReturnTypeLink:
		//	VoidTypeLink | TypeLink;
		@Override public ParserRule getRule() { return rule; }

		//VoidTypeLink | TypeLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidTypeLink
		public RuleCall getVoidTypeLinkParserRuleCall_0() { return cVoidTypeLinkParserRuleCall_0; }

		//TypeLink
		public RuleCall getTypeLinkParserRuleCall_1() { return cTypeLinkParserRuleCall_1; }
	}

	public class VoidTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoidTypeLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTargetVoidKeyword_0 = (Keyword)cTargetAssignment.eContents().get(0);
		
		//VoidTypeLink:
		//	target="void";
		@Override public ParserRule getRule() { return rule; }

		//target="void"
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//"void"
		public Keyword getTargetVoidKeyword_0() { return cTargetVoidKeyword_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeDef:
		//	annotations+=Annotation* type=Type;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=Type
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixedTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRecordTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cErrorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	EnumType | FixedType | RecordType | ErrorType;
		@Override public ParserRule getRule() { return rule; }

		//EnumType | FixedType | RecordType | ErrorType
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_0() { return cEnumTypeParserRuleCall_0; }

		//FixedType
		public RuleCall getFixedTypeParserRuleCall_1() { return cFixedTypeParserRuleCall_1; }

		//RecordType
		public RuleCall getRecordTypeParserRuleCall_2() { return cRecordTypeParserRuleCall_2; }

		//ErrorType
		public RuleCall getErrorTypeParserRuleCall_3() { return cErrorTypeParserRuleCall_3; }
	}

	public class ErrorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ErrorType:
		//	"error" name=EscapableId "{" fields+=Field* "}";
		@Override public ParserRule getRule() { return rule; }

		//"error" name=EscapableId "{" fields+=Field* "}"
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RecordType:
		//	"record" name=EscapableId "{" fields+=Field* "}";
		@Override public ParserRule getRule() { return rule; }

		//"record" name=EscapableId "{" fields+=Field* "}"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFieldTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameAnnotationsAnnotationParserRuleCall_2_0 = (RuleCall)cNameAnnotationsAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEscapableIdParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueParserRuleCall_4_1_0 = (RuleCall)cDefaultAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Field:
		//	annotations+=Annotation* type=FieldType nameAnnotations+=Annotation* name=EscapableId ("=" default=Value)? ";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=FieldType nameAnnotations+=Annotation* name=EscapableId ("=" default=Value)? ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=FieldType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//FieldType
		public RuleCall getTypeFieldTypeParserRuleCall_1_0() { return cTypeFieldTypeParserRuleCall_1_0; }

		//nameAnnotations+=Annotation*
		public Assignment getNameAnnotationsAssignment_2() { return cNameAnnotationsAssignment_2; }

		//Annotation
		public RuleCall getNameAnnotationsAnnotationParserRuleCall_2_0() { return cNameAnnotationsAnnotationParserRuleCall_2_0; }

		//name=EscapableId
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_3_0() { return cNameEscapableIdParserRuleCall_3_0; }

		//("=" default=Value)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//default=Value
		public Assignment getDefaultAssignment_4_1() { return cDefaultAssignment_4_1; }

		//Value
		public RuleCall getDefaultValueParserRuleCall_4_1_0() { return cDefaultValueParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleFieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnionFieldTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayFieldTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMapFieldTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FieldType:
		//	SimpleFieldType | UnionFieldType | ArrayFieldType | MapFieldType;
		@Override public ParserRule getRule() { return rule; }

		//SimpleFieldType | UnionFieldType | ArrayFieldType | MapFieldType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleFieldType
		public RuleCall getSimpleFieldTypeParserRuleCall_0() { return cSimpleFieldTypeParserRuleCall_0; }

		//UnionFieldType
		public RuleCall getUnionFieldTypeParserRuleCall_1() { return cUnionFieldTypeParserRuleCall_1; }

		//ArrayFieldType
		public RuleCall getArrayFieldTypeParserRuleCall_2() { return cArrayFieldTypeParserRuleCall_2; }

		//MapFieldType
		public RuleCall getMapFieldTypeParserRuleCall_3() { return cMapFieldTypeParserRuleCall_3; }
	}

	public class SimpleFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleFieldType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeLinkParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//SimpleFieldType:
		//	type=TypeLink;
		@Override public ParserRule getRule() { return rule; }

		//type=TypeLink
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//TypeLink
		public RuleCall getTypeTypeLinkParserRuleCall_0() { return cTypeTypeLinkParserRuleCall_0; }
	}

	public class UnionFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeLinkParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesTypeLinkParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnionFieldType:
		//	"union" "{" types+=TypeLink ("," types+=TypeLink)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"union" "{" types+=TypeLink ("," types+=TypeLink)* "}"
		public Group getGroup() { return cGroup; }

		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//types+=TypeLink
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//TypeLink
		public RuleCall getTypesTypeLinkParserRuleCall_2_0() { return cTypesTypeLinkParserRuleCall_2_0; }

		//("," types+=TypeLink)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=TypeLink
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//TypeLink
		public RuleCall getTypesTypeLinkParserRuleCall_3_1_0() { return cTypesTypeLinkParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ArrayFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeLinkParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayFieldType:
		//	"array" "<" annotation=Annotation? type=TypeLink ">";
		@Override public ParserRule getRule() { return rule; }

		//"array" "<" annotation=Annotation? type=TypeLink ">"
		public Group getGroup() { return cGroup; }

		//"array"
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_2() { return cAnnotationAssignment_2; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationParserRuleCall_2_0; }

		//type=TypeLink
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeLink
		public RuleCall getTypeTypeLinkParserRuleCall_3_0() { return cTypeTypeLinkParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class MapFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeLinkParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapFieldType:
		//	"map" "<" annotation=Annotation? type=TypeLink ">";
		@Override public ParserRule getRule() { return rule; }

		//"map" "<" annotation=Annotation? type=TypeLink ">"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_2() { return cAnnotationAssignment_2; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_2_0() { return cAnnotationAnnotationParserRuleCall_2_0; }

		//type=TypeLink
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeLink
		public RuleCall getTypeTypeLinkParserRuleCall_3_0() { return cTypeTypeLinkParserRuleCall_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class TypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimativeTypeLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomTypeLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeLink:
		//	PrimativeTypeLink | CustomTypeLink;
		@Override public ParserRule getRule() { return rule; }

		//PrimativeTypeLink | CustomTypeLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimativeTypeLink
		public RuleCall getPrimativeTypeLinkParserRuleCall_0() { return cPrimativeTypeLinkParserRuleCall_0; }

		//CustomTypeLink
		public RuleCall getCustomTypeLinkParserRuleCall_1() { return cCustomTypeLinkParserRuleCall_1; }
	}

	public class PrimativeTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimativeTypeLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTargetAlternatives_0 = (Alternatives)cTargetAssignment.eContents().get(0);
		private final Keyword cTargetIntKeyword_0_0 = (Keyword)cTargetAlternatives_0.eContents().get(0);
		private final Keyword cTargetLongKeyword_0_1 = (Keyword)cTargetAlternatives_0.eContents().get(1);
		private final Keyword cTargetStringKeyword_0_2 = (Keyword)cTargetAlternatives_0.eContents().get(2);
		private final Keyword cTargetBooleanKeyword_0_3 = (Keyword)cTargetAlternatives_0.eContents().get(3);
		private final Keyword cTargetFloatKeyword_0_4 = (Keyword)cTargetAlternatives_0.eContents().get(4);
		private final Keyword cTargetDoubleKeyword_0_5 = (Keyword)cTargetAlternatives_0.eContents().get(5);
		private final Keyword cTargetNullKeyword_0_6 = (Keyword)cTargetAlternatives_0.eContents().get(6);
		private final Keyword cTargetBytesKeyword_0_7 = (Keyword)cTargetAlternatives_0.eContents().get(7);
		
		//PrimativeTypeLink:
		//	target=("int" | "long" | "string" | "boolean" | "float" | "double" | "null" | "bytes");
		@Override public ParserRule getRule() { return rule; }

		//target=("int" | "long" | "string" | "boolean" | "float" | "double" | "null" | "bytes")
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//"int" | "long" | "string" | "boolean" | "float" | "double" | "null" | "bytes"
		public Alternatives getTargetAlternatives_0() { return cTargetAlternatives_0; }

		//"int"
		public Keyword getTargetIntKeyword_0_0() { return cTargetIntKeyword_0_0; }

		//"long"
		public Keyword getTargetLongKeyword_0_1() { return cTargetLongKeyword_0_1; }

		//"string"
		public Keyword getTargetStringKeyword_0_2() { return cTargetStringKeyword_0_2; }

		//"boolean"
		public Keyword getTargetBooleanKeyword_0_3() { return cTargetBooleanKeyword_0_3; }

		//"float"
		public Keyword getTargetFloatKeyword_0_4() { return cTargetFloatKeyword_0_4; }

		//"double"
		public Keyword getTargetDoubleKeyword_0_5() { return cTargetDoubleKeyword_0_5; }

		//"null"
		public Keyword getTargetNullKeyword_0_6() { return cTargetNullKeyword_0_6; }

		//"bytes"
		public Keyword getTargetBytesKeyword_0_7() { return cTargetBytesKeyword_0_7; }
	}

	public class CustomTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomTypeLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetTypeCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetTypeEscapableIdParserRuleCall_0_1 = (RuleCall)cTargetTypeCrossReference_0.eContents().get(1);
		
		//CustomTypeLink:
		//	target=[Type|EscapableId];
		@Override public ParserRule getRule() { return rule; }

		//target=[Type|EscapableId]
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//[Type|EscapableId]
		public CrossReference getTargetTypeCrossReference_0() { return cTargetTypeCrossReference_0; }

		//EscapableId
		public RuleCall getTargetTypeEscapableIdParserRuleCall_0_1() { return cTargetTypeEscapableIdParserRuleCall_0_1; }
	}

	public class FixedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FixedType:
		//	"fixed" name=EscapableId "(" size=INT ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"fixed" name=EscapableId "(" size=INT ")" ";"
		public Group getGroup() { return cGroup; }

		//"fixed"
		public Keyword getFixedKeyword_0() { return cFixedKeyword_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEscapableIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsIDTerminalRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsIDTerminalRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumType:
		//	"enum" name=EscapableId "{" literals+=ID ("," literals+=ID)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=EscapableId "{" literals+=ID ("," literals+=ID)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=EscapableId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EscapableId
		public RuleCall getNameEscapableIdParserRuleCall_1_0() { return cNameEscapableIdParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literals+=ID
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }

		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_3_0() { return cLiteralsIDTerminalRuleCall_3_0; }

		//("," literals+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//literals+=ID
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }

		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_4_1_0() { return cLiteralsIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//	name=AN ("(" values=Values ")")?;
		@Override public ParserRule getRule() { return rule; }

		//name=AN ("(" values=Values ")")?
		public Group getGroup() { return cGroup; }

		//name=AN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//AN
		public RuleCall getNameANParserRuleCall_0_0() { return cNameANParserRuleCall_0_0; }

		//("(" values=Values ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//values=Values
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_1_1_0() { return cValuesValuesParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Values");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValuesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueArrayParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1_1.eContents().get(0);
		
		//Values:
		//	{Values} (value+=Array | value+=Value ("," value+=Value)*)*;
		@Override public ParserRule getRule() { return rule; }

		//{Values} (value+=Array | value+=Value ("," value+=Value)*)*
		public Group getGroup() { return cGroup; }

		//{Values}
		public Action getValuesAction_0() { return cValuesAction_0; }

		//(value+=Array | value+=Value ("," value+=Value)*)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value+=Array
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//Array
		public RuleCall getValueArrayParserRuleCall_1_0_0() { return cValueArrayParserRuleCall_1_0_0; }

		//value+=Value ("," value+=Value)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//value+=Value
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_0_0() { return cValueValueParserRuleCall_1_1_0_0; }

		//("," value+=Value)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//value+=Value
		public Assignment getValueAssignment_1_1_1_1() { return cValueAssignment_1_1_1_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_1_1_1_0() { return cValueValueParserRuleCall_1_1_1_1_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesValuesParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Array:
		//	"[" values=Values "]";
		@Override public ParserRule getRule() { return rule; }

		//=> "[" values=Values "]"
		public Group getGroup() { return cGroup; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values=Values
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Values
		public RuleCall getValuesValuesParserRuleCall_1_0() { return cValuesValuesParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value:
		//	StringValue | Array | IntValue | BooleanValue | Null;
		@Override public ParserRule getRule() { return rule; }

		//StringValue | Array | IntValue | BooleanValue | Null
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_2() { return cIntValueParserRuleCall_2; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }

		//Null
		public RuleCall getNullParserRuleCall_4() { return cNullParserRuleCall_4; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBooleanParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//BooleanValue:
		//	val=Boolean;
		@Override public ParserRule getRule() { return rule; }

		//val=Boolean
		public Assignment getValAssignment() { return cValAssignment; }

		//Boolean
		public RuleCall getValBooleanParserRuleCall_0() { return cValBooleanParserRuleCall_0; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNullKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//Null:
		//	val="null";
		@Override public ParserRule getRule() { return rule; }

		//val="null"
		public Assignment getValAssignment() { return cValAssignment; }

		//"null"
		public Keyword getValNullKeyword_0() { return cValNullKeyword_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringValue:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAlternatives_0.eContents().get(0);
		private final RuleCall cValNegativeIntParserRuleCall_0_1 = (RuleCall)cValAlternatives_0.eContents().get(1);
		
		//IntValue:
		//	val=(INT | NegativeInt);
		@Override public ParserRule getRule() { return rule; }

		//val=(INT | NegativeInt)
		public Assignment getValAssignment() { return cValAssignment; }

		//INT | NegativeInt
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }

		//NegativeInt
		public RuleCall getValNegativeIntParserRuleCall_0_1() { return cValNegativeIntParserRuleCall_0_1; }
	}

	public class EscapableIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapableId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGraveAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cReservedKeyWordsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cGraveAccentKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EscapableId:
		//	ID | "`" ReservedKeyWords "`";
		@Override public ParserRule getRule() { return rule; }

		//ID | "`" ReservedKeyWords "`"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"`" ReservedKeyWords "`"
		public Group getGroup_1() { return cGroup_1; }

		//"`"
		public Keyword getGraveAccentKeyword_1_0() { return cGraveAccentKeyword_1_0; }

		//ReservedKeyWords
		public RuleCall getReservedKeyWordsParserRuleCall_1_1() { return cReservedKeyWordsParserRuleCall_1_1; }

		//"`"
		public Keyword getGraveAccentKeyword_1_2() { return cGraveAccentKeyword_1_2; }
	}

	public class ReservedKeyWordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReservedKeyWords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFixedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEnumKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMapKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cArrayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUnionKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cErrorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cProtocolKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOnewayKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cImportKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cThrowsKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//ReservedKeyWords:
		//	"record" | "fixed" | "enum" | "map" | "array" | "union" | "error" | "protocol" | "oneway" | "import" | "throws";
		@Override public ParserRule getRule() { return rule; }

		//"record" | "fixed" | "enum" | "map" | "array" | "union" | "error" | "protocol" | "oneway" | "import" | "throws"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//"fixed"
		public Keyword getFixedKeyword_1() { return cFixedKeyword_1; }

		//"enum"
		public Keyword getEnumKeyword_2() { return cEnumKeyword_2; }

		//"map"
		public Keyword getMapKeyword_3() { return cMapKeyword_3; }

		//"array"
		public Keyword getArrayKeyword_4() { return cArrayKeyword_4; }

		//"union"
		public Keyword getUnionKeyword_5() { return cUnionKeyword_5; }

		//"error"
		public Keyword getErrorKeyword_6() { return cErrorKeyword_6; }

		//"protocol"
		public Keyword getProtocolKeyword_7() { return cProtocolKeyword_7; }

		//"oneway"
		public Keyword getOnewayKeyword_8() { return cOnewayKeyword_8; }

		//"import"
		public Keyword getImportKeyword_9() { return cImportKeyword_9; }

		//"throws"
		public Keyword getThrowsKeyword_10() { return cThrowsKeyword_10; }
	}

	public class ANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//AN:
		//	"@" ID ("-" ID)*;
		@Override public ParserRule getRule() { return rule; }

		//"@" ID ("-" ID)*
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("-" ID)*
		public Group getGroup_2() { return cGroup_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class NegativeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegativeInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NegativeInt returns ecore::EInt:
		//	"-" INT;
		@Override public ParserRule getRule() { return rule; }

		//"-" INT
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean returns ecore::EBoolean:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	public class ImportTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ImportType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIDLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIDLIdlKeyword_0_0 = (Keyword)cIDLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTOCOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTOCOLProtocolKeyword_1_0 = (Keyword)cPROTOCOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSCHEMAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSCHEMASchemaKeyword_2_0 = (Keyword)cSCHEMAEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ImportType:
		//	IDL="idl" | PROTOCOL="protocol" | SCHEMA="schema";
		public EnumRule getRule() { return rule; }

		//IDL="idl" | PROTOCOL="protocol" | SCHEMA="schema"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDL="idl"
		public EnumLiteralDeclaration getIDLEnumLiteralDeclaration_0() { return cIDLEnumLiteralDeclaration_0; }

		//"idl"
		public Keyword getIDLIdlKeyword_0_0() { return cIDLIdlKeyword_0_0; }

		//PROTOCOL="protocol"
		public EnumLiteralDeclaration getPROTOCOLEnumLiteralDeclaration_1() { return cPROTOCOLEnumLiteralDeclaration_1; }

		//"protocol"
		public Keyword getPROTOCOLProtocolKeyword_1_0() { return cPROTOCOLProtocolKeyword_1_0; }

		//SCHEMA="schema"
		public EnumLiteralDeclaration getSCHEMAEnumLiteralDeclaration_2() { return cSCHEMAEnumLiteralDeclaration_2; }

		//"schema"
		public Keyword getSCHEMASchemaKeyword_2_0() { return cSCHEMASchemaKeyword_2_0; }
	}
	
	private final AvroIDLFileElements pAvroIDLFile;
	private final ImportElements pImport;
	private final ProtocolElements pProtocol;
	private final ElementElements pElement;
	private final RPCMessageElements pRPCMessage;
	private final ArgumentElements pArgument;
	private final ReturnTypeLinkElements pReturnTypeLink;
	private final VoidTypeLinkElements pVoidTypeLink;
	private final TypeDefElements pTypeDef;
	private final TypeElements pType;
	private final ErrorTypeElements pErrorType;
	private final RecordTypeElements pRecordType;
	private final FieldElements pField;
	private final FieldTypeElements pFieldType;
	private final SimpleFieldTypeElements pSimpleFieldType;
	private final UnionFieldTypeElements pUnionFieldType;
	private final ArrayFieldTypeElements pArrayFieldType;
	private final MapFieldTypeElements pMapFieldType;
	private final TypeLinkElements pTypeLink;
	private final PrimativeTypeLinkElements pPrimativeTypeLink;
	private final CustomTypeLinkElements pCustomTypeLink;
	private final FixedTypeElements pFixedType;
	private final EnumTypeElements pEnumType;
	private final AnnotationElements pAnnotation;
	private final ValuesElements pValues;
	private final ArrayElements pArray;
	private final ValueElements pValue;
	private final BooleanValueElements pBooleanValue;
	private final NullElements pNull;
	private final StringValueElements pStringValue;
	private final IntValueElements pIntValue;
	private final EscapableIdElements pEscapableId;
	private final ReservedKeyWordsElements pReservedKeyWords;
	private final ANElements pAN;
	private final NegativeIntElements pNegativeInt;
	private final BooleanElements pBoolean;
	private final ImportTypeElements unknownRuleImportType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AvroIDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAvroIDLFile = new AvroIDLFileElements();
		this.pImport = new ImportElements();
		this.pProtocol = new ProtocolElements();
		this.pElement = new ElementElements();
		this.pRPCMessage = new RPCMessageElements();
		this.pArgument = new ArgumentElements();
		this.pReturnTypeLink = new ReturnTypeLinkElements();
		this.pVoidTypeLink = new VoidTypeLinkElements();
		this.pTypeDef = new TypeDefElements();
		this.pType = new TypeElements();
		this.pErrorType = new ErrorTypeElements();
		this.pRecordType = new RecordTypeElements();
		this.pField = new FieldElements();
		this.pFieldType = new FieldTypeElements();
		this.pSimpleFieldType = new SimpleFieldTypeElements();
		this.pUnionFieldType = new UnionFieldTypeElements();
		this.pArrayFieldType = new ArrayFieldTypeElements();
		this.pMapFieldType = new MapFieldTypeElements();
		this.pTypeLink = new TypeLinkElements();
		this.pPrimativeTypeLink = new PrimativeTypeLinkElements();
		this.pCustomTypeLink = new CustomTypeLinkElements();
		this.pFixedType = new FixedTypeElements();
		this.pEnumType = new EnumTypeElements();
		this.pAnnotation = new AnnotationElements();
		this.pValues = new ValuesElements();
		this.pArray = new ArrayElements();
		this.pValue = new ValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pNull = new NullElements();
		this.pStringValue = new StringValueElements();
		this.pIntValue = new IntValueElements();
		this.pEscapableId = new EscapableIdElements();
		this.pReservedKeyWords = new ReservedKeyWordsElements();
		this.pAN = new ANElements();
		this.pNegativeInt = new NegativeIntElements();
		this.pBoolean = new BooleanElements();
		this.unknownRuleImportType = new ImportTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("avroclipse.AvroIDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AvroIDLFile:
	//	imports+=Import* protocols+=Protocol?;
	public AvroIDLFileElements getAvroIDLFileAccess() {
		return pAvroIDLFile;
	}
	
	public ParserRule getAvroIDLFileRule() {
		return getAvroIDLFileAccess().getRule();
	}

	//Import:
	//	"import" type=ImportType importURI=STRING ";";
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Protocol:
	//	annotations+=Annotation* "protocol" name=EscapableId "{" elements+=Element* "}";
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//Element:
	//	TypeDef | RPCMessage;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//RPCMessage:
	//	returnType=ReturnTypeLink name=EscapableId "(" (arguments+=Argument ("," arguments+=Argument)*)* ")" ("throws"
	//	error=[ErrorType|EscapableId])? oneway?="oneway"? ";";
	public RPCMessageElements getRPCMessageAccess() {
		return pRPCMessage;
	}
	
	public ParserRule getRPCMessageRule() {
		return getRPCMessageAccess().getRule();
	}

	//Argument:
	//	type=TypeLink name=EscapableId ("=" default=Value)?;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ReturnTypeLink:
	//	VoidTypeLink | TypeLink;
	public ReturnTypeLinkElements getReturnTypeLinkAccess() {
		return pReturnTypeLink;
	}
	
	public ParserRule getReturnTypeLinkRule() {
		return getReturnTypeLinkAccess().getRule();
	}

	//VoidTypeLink:
	//	target="void";
	public VoidTypeLinkElements getVoidTypeLinkAccess() {
		return pVoidTypeLink;
	}
	
	public ParserRule getVoidTypeLinkRule() {
		return getVoidTypeLinkAccess().getRule();
	}

	//TypeDef:
	//	annotations+=Annotation* type=Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//Type:
	//	EnumType | FixedType | RecordType | ErrorType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ErrorType:
	//	"error" name=EscapableId "{" fields+=Field* "}";
	public ErrorTypeElements getErrorTypeAccess() {
		return pErrorType;
	}
	
	public ParserRule getErrorTypeRule() {
		return getErrorTypeAccess().getRule();
	}

	//RecordType:
	//	"record" name=EscapableId "{" fields+=Field* "}";
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}

	//Field:
	//	annotations+=Annotation* type=FieldType nameAnnotations+=Annotation* name=EscapableId ("=" default=Value)? ";";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//FieldType:
	//	SimpleFieldType | UnionFieldType | ArrayFieldType | MapFieldType;
	public FieldTypeElements getFieldTypeAccess() {
		return pFieldType;
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}

	//SimpleFieldType:
	//	type=TypeLink;
	public SimpleFieldTypeElements getSimpleFieldTypeAccess() {
		return pSimpleFieldType;
	}
	
	public ParserRule getSimpleFieldTypeRule() {
		return getSimpleFieldTypeAccess().getRule();
	}

	//UnionFieldType:
	//	"union" "{" types+=TypeLink ("," types+=TypeLink)* "}";
	public UnionFieldTypeElements getUnionFieldTypeAccess() {
		return pUnionFieldType;
	}
	
	public ParserRule getUnionFieldTypeRule() {
		return getUnionFieldTypeAccess().getRule();
	}

	//ArrayFieldType:
	//	"array" "<" annotation=Annotation? type=TypeLink ">";
	public ArrayFieldTypeElements getArrayFieldTypeAccess() {
		return pArrayFieldType;
	}
	
	public ParserRule getArrayFieldTypeRule() {
		return getArrayFieldTypeAccess().getRule();
	}

	//MapFieldType:
	//	"map" "<" annotation=Annotation? type=TypeLink ">";
	public MapFieldTypeElements getMapFieldTypeAccess() {
		return pMapFieldType;
	}
	
	public ParserRule getMapFieldTypeRule() {
		return getMapFieldTypeAccess().getRule();
	}

	//TypeLink:
	//	PrimativeTypeLink | CustomTypeLink;
	public TypeLinkElements getTypeLinkAccess() {
		return pTypeLink;
	}
	
	public ParserRule getTypeLinkRule() {
		return getTypeLinkAccess().getRule();
	}

	//PrimativeTypeLink:
	//	target=("int" | "long" | "string" | "boolean" | "float" | "double" | "null" | "bytes");
	public PrimativeTypeLinkElements getPrimativeTypeLinkAccess() {
		return pPrimativeTypeLink;
	}
	
	public ParserRule getPrimativeTypeLinkRule() {
		return getPrimativeTypeLinkAccess().getRule();
	}

	//CustomTypeLink:
	//	target=[Type|EscapableId];
	public CustomTypeLinkElements getCustomTypeLinkAccess() {
		return pCustomTypeLink;
	}
	
	public ParserRule getCustomTypeLinkRule() {
		return getCustomTypeLinkAccess().getRule();
	}

	//FixedType:
	//	"fixed" name=EscapableId "(" size=INT ")" ";";
	public FixedTypeElements getFixedTypeAccess() {
		return pFixedType;
	}
	
	public ParserRule getFixedTypeRule() {
		return getFixedTypeAccess().getRule();
	}

	//EnumType:
	//	"enum" name=EscapableId "{" literals+=ID ("," literals+=ID)* "}";
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//Annotation:
	//	name=AN ("(" values=Values ")")?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Values:
	//	{Values} (value+=Array | value+=Value ("," value+=Value)*)*;
	public ValuesElements getValuesAccess() {
		return pValues;
	}
	
	public ParserRule getValuesRule() {
		return getValuesAccess().getRule();
	}

	//Array:
	//	"[" values=Values "]";
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Value:
	//	StringValue | Array | IntValue | BooleanValue | Null;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//BooleanValue:
	//	val=Boolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//Null:
	//	val="null";
	public NullElements getNullAccess() {
		return pNull;
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	//StringValue:
	//	val=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntValue:
	//	val=(INT | NegativeInt);
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//EscapableId:
	//	ID | "`" ReservedKeyWords "`";
	public EscapableIdElements getEscapableIdAccess() {
		return pEscapableId;
	}
	
	public ParserRule getEscapableIdRule() {
		return getEscapableIdAccess().getRule();
	}

	//ReservedKeyWords:
	//	"record" | "fixed" | "enum" | "map" | "array" | "union" | "error" | "protocol" | "oneway" | "import" | "throws";
	public ReservedKeyWordsElements getReservedKeyWordsAccess() {
		return pReservedKeyWords;
	}
	
	public ParserRule getReservedKeyWordsRule() {
		return getReservedKeyWordsAccess().getRule();
	}

	//AN:
	//	"@" ID ("-" ID)*;
	public ANElements getANAccess() {
		return pAN;
	}
	
	public ParserRule getANRule() {
		return getANAccess().getRule();
	}

	//NegativeInt returns ecore::EInt:
	//	"-" INT;
	public NegativeIntElements getNegativeIntAccess() {
		return pNegativeInt;
	}
	
	public ParserRule getNegativeIntRule() {
		return getNegativeIntAccess().getRule();
	}

	//Boolean returns ecore::EBoolean:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//enum ImportType:
	//	IDL="idl" | PROTOCOL="protocol" | SCHEMA="schema";
	public ImportTypeElements getImportTypeAccess() {
		return unknownRuleImportType;
	}
	
	public EnumRule getImportTypeRule() {
		return getImportTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
