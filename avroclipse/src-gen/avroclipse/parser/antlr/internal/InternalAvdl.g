/*
 * generated by Xtext
 */
grammar InternalAvdl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package avroclipse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package avroclipse.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import avroclipse.services.AvdlGrammarAccess;

}

@parser::members {

 	private AvdlGrammarAccess grammarAccess;
 	
    public InternalAvdlParser(TokenStream input, AvdlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AvdlFile";	
   	}
   	
   	@Override
   	protected AvdlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAvdlFile
entryRuleAvdlFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAvdlFileRule()); }
	 iv_ruleAvdlFile=ruleAvdlFile 
	 { $current=$iv_ruleAvdlFile.current; } 
	 EOF 
;

// Rule AvdlFile
ruleAvdlFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAvdlFileAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAvdlFileRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAvdlFileAccess().getProtocolsProtocolParserRuleCall_1_0()); 
	    }
		lv_protocols_1_0=ruleProtocol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAvdlFileRule());
	        }
       		add(
       			$current, 
       			"protocols",
        		lv_protocols_1_0, 
        		"Protocol");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getTypeImportTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleImportType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ImportType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_importUri_2_0=RULE_STRING
		{
			newLeafNode(lv_importUri_2_0, grammarAccess.getImportAccess().getImportUriSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importUri",
        		lv_importUri_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	 iv_ruleProtocol=ruleProtocol 
	 { $current=$iv_ruleProtocol.current; } 
	 EOF 
;

// Rule Protocol
ruleProtocol returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='protocol' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProtocolAccess().getProtocolKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getNameEscapableIdParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getElementsElementParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getTypeDefParserRuleCall_0()); 
    }
    this_TypeDef_0=ruleTypeDef
    { 
        $current = $this_TypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getRPCMessageParserRuleCall_1()); 
    }
    this_RPCMessage_1=ruleRPCMessage
    { 
        $current = $this_RPCMessage_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRPCMessage
entryRuleRPCMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRPCMessageRule()); }
	 iv_ruleRPCMessage=ruleRPCMessage 
	 { $current=$iv_ruleRPCMessage.current; } 
	 EOF 
;

// Rule RPCMessage
ruleRPCMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRPCMessageAccess().getReturnTypeReturnTypeLinkParserRuleCall_0_0()); 
	    }
		lv_returnType_0_0=ruleReturnTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRPCMessageRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_0_0, 
        		"ReturnTypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRPCMessageAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRPCMessageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRPCMessageAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRPCMessageRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRPCMessageAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRPCMessageAccess().getArgumentsArgumentParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRPCMessageRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRPCMessageAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_7='throws' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRPCMessageAccess().getThrowsKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRPCMessageRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRPCMessageAccess().getErrorErrorTypeCrossReference_5_1_0()); 
	    }
		ruleEscapableId		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_oneway_9_0=	'oneway' 
    {
        newLeafNode(lv_oneway_9_0, grammarAccess.getRPCMessageAccess().getOnewayOnewayKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRPCMessageRule());
	        }
       		setWithLastConsumed($current, "oneway", true, "oneway");
	    }

)
)?	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRPCMessageAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getTypeTypeLinkParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArgumentAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getDefaultValueParserRuleCall_2_1_0()); 
	    }
		lv_default_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReturnTypeLink
entryRuleReturnTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnTypeLinkRule()); }
	 iv_ruleReturnTypeLink=ruleReturnTypeLink 
	 { $current=$iv_ruleReturnTypeLink.current; } 
	 EOF 
;

// Rule ReturnTypeLink
ruleReturnTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReturnTypeLinkAccess().getVoidTypeLinkParserRuleCall_0()); 
    }
    this_VoidTypeLink_0=ruleVoidTypeLink
    { 
        $current = $this_VoidTypeLink_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReturnTypeLinkAccess().getTypeLinkParserRuleCall_1()); 
    }
    this_TypeLink_1=ruleTypeLink
    { 
        $current = $this_TypeLink_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVoidTypeLink
entryRuleVoidTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidTypeLinkRule()); }
	 iv_ruleVoidTypeLink=ruleVoidTypeLink 
	 { $current=$iv_ruleVoidTypeLink.current; } 
	 EOF 
;

// Rule VoidTypeLink
ruleVoidTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_target_0_0=	'void' 
    {
        newLeafNode(lv_target_0_0, grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVoidTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_0, "void");
	    }

)
)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getEnumTypeParserRuleCall_0()); 
    }
    this_EnumType_0=ruleEnumType
    { 
        $current = $this_EnumType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getFixedTypeParserRuleCall_1()); 
    }
    this_FixedType_1=ruleFixedType
    { 
        $current = $this_FixedType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_2()); 
    }
    this_RecordType_2=ruleRecordType
    { 
        $current = $this_RecordType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getErrorTypeParserRuleCall_3()); 
    }
    this_ErrorType_3=ruleErrorType
    { 
        $current = $this_ErrorType_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleErrorType
entryRuleErrorType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getErrorTypeRule()); }
	 iv_ruleErrorType=ruleErrorType 
	 { $current=$iv_ruleErrorType.current; } 
	 EOF 
;

// Rule ErrorType
ruleErrorType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='error' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getErrorTypeAccess().getErrorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getErrorTypeAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getErrorTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getErrorTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getErrorTypeAccess().getFieldsFieldParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getErrorTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getErrorTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleRecordType
entryRuleRecordType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	 iv_ruleRecordType=ruleRecordType 
	 { $current=$iv_ruleRecordType.current; } 
	 EOF 
;

// Rule RecordType
ruleRecordType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='record' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTypeAccess().getRecordKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getFieldsFieldParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getNameAnnotationsAnnotationParserRuleCall_2_0()); 
	    }
		lv_nameAnnotations_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		add(
       			$current, 
       			"nameAnnotations",
        		lv_nameAnnotations_2_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getNameEscapableIdParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getDefaultValueParserRuleCall_4_1_0()); 
	    }
		lv_default_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFieldAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleFieldType
entryRuleFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldTypeRule()); }
	 iv_ruleFieldType=ruleFieldType 
	 { $current=$iv_ruleFieldType.current; } 
	 EOF 
;

// Rule FieldType
ruleFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFieldTypeAccess().getSimpleFieldTypeParserRuleCall_0()); 
    }
    this_SimpleFieldType_0=ruleSimpleFieldType
    { 
        $current = $this_SimpleFieldType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFieldTypeAccess().getUnionFieldTypeParserRuleCall_1()); 
    }
    this_UnionFieldType_1=ruleUnionFieldType
    { 
        $current = $this_UnionFieldType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFieldTypeAccess().getArrayFieldTypeParserRuleCall_2()); 
    }
    this_ArrayFieldType_2=ruleArrayFieldType
    { 
        $current = $this_ArrayFieldType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFieldTypeAccess().getMapFieldTypeParserRuleCall_3()); 
    }
    this_MapFieldType_3=ruleMapFieldType
    { 
        $current = $this_MapFieldType_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleFieldType
entryRuleSimpleFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleFieldTypeRule()); }
	 iv_ruleSimpleFieldType=ruleSimpleFieldType 
	 { $current=$iv_ruleSimpleFieldType.current; } 
	 EOF 
;

// Rule SimpleFieldType
ruleSimpleFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleFieldTypeAccess().getTypeTypeLinkParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnionFieldType
entryRuleUnionFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionFieldTypeRule()); }
	 iv_ruleUnionFieldType=ruleUnionFieldType 
	 { $current=$iv_ruleUnionFieldType.current; } 
	 EOF 
;

// Rule UnionFieldType
ruleUnionFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionFieldTypeAccess().getUnionKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionFieldTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionFieldTypeRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionFieldTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionFieldTypeAccess().getTypesTypeLinkParserRuleCall_3_1_0()); 
	    }
		lv_types_4_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionFieldTypeRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnionFieldTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleArrayFieldType
entryRuleArrayFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayFieldTypeRule()); }
	 iv_ruleArrayFieldType=ruleArrayFieldType 
	 { $current=$iv_ruleArrayFieldType.current; } 
	 EOF 
;

// Rule ArrayFieldType
ruleArrayFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayFieldTypeAccess().getArrayKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayFieldTypeAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); 
	    }
		lv_annotation_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayFieldTypeRule());
	        }
       		set(
       			$current, 
       			"annotation",
        		lv_annotation_2_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayFieldTypeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleMapFieldType
entryRuleMapFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapFieldTypeRule()); }
	 iv_ruleMapFieldType=ruleMapFieldType 
	 { $current=$iv_ruleMapFieldType.current; } 
	 EOF 
;

// Rule MapFieldType
ruleMapFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='map' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapFieldTypeAccess().getMapKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapFieldTypeAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapFieldTypeAccess().getAnnotationAnnotationParserRuleCall_2_0()); 
	    }
		lv_annotation_2_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapFieldTypeRule());
	        }
       		set(
       			$current, 
       			"annotation",
        		lv_annotation_2_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMapFieldTypeAccess().getTypeTypeLinkParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMapFieldTypeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleTypeLink
entryRuleTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeLinkRule()); }
	 iv_ruleTypeLink=ruleTypeLink 
	 { $current=$iv_ruleTypeLink.current; } 
	 EOF 
;

// Rule TypeLink
ruleTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeLinkAccess().getPrimativeTypeLinkParserRuleCall_0()); 
    }
    this_PrimativeTypeLink_0=rulePrimativeTypeLink
    { 
        $current = $this_PrimativeTypeLink_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeLinkAccess().getCustomTypeLinkParserRuleCall_1()); 
    }
    this_CustomTypeLink_1=ruleCustomTypeLink
    { 
        $current = $this_CustomTypeLink_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimativeTypeLink
entryRulePrimativeTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimativeTypeLinkRule()); }
	 iv_rulePrimativeTypeLink=rulePrimativeTypeLink 
	 { $current=$iv_rulePrimativeTypeLink.current; } 
	 EOF 
;

// Rule PrimativeTypeLink
rulePrimativeTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_target_0_1=	'null' 
    {
        newLeafNode(lv_target_0_1, grammarAccess.getPrimativeTypeLinkAccess().getTargetNullKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_1, null);
	    }

    |		lv_target_0_2=	'int' 
    {
        newLeafNode(lv_target_0_2, grammarAccess.getPrimativeTypeLinkAccess().getTargetIntKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_2, null);
	    }

    |		lv_target_0_3=	'long' 
    {
        newLeafNode(lv_target_0_3, grammarAccess.getPrimativeTypeLinkAccess().getTargetLongKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_3, null);
	    }

    |		lv_target_0_4=	'float' 
    {
        newLeafNode(lv_target_0_4, grammarAccess.getPrimativeTypeLinkAccess().getTargetFloatKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_4, null);
	    }

    |		lv_target_0_5=	'double' 
    {
        newLeafNode(lv_target_0_5, grammarAccess.getPrimativeTypeLinkAccess().getTargetDoubleKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_5, null);
	    }

    |		lv_target_0_6=	'bytes' 
    {
        newLeafNode(lv_target_0_6, grammarAccess.getPrimativeTypeLinkAccess().getTargetBytesKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_6, null);
	    }

    |		lv_target_0_7=	'string' 
    {
        newLeafNode(lv_target_0_7, grammarAccess.getPrimativeTypeLinkAccess().getTargetStringKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimativeTypeLinkRule());
	        }
       		setWithLastConsumed($current, "target", lv_target_0_7, null);
	    }

)

)
)
;





// Entry rule entryRuleCustomTypeLink
entryRuleCustomTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomTypeLinkRule()); }
	 iv_ruleCustomTypeLink=ruleCustomTypeLink 
	 { $current=$iv_ruleCustomTypeLink.current; } 
	 EOF 
;

// Rule CustomTypeLink
ruleCustomTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomTypeLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCustomTypeLinkAccess().getTargetTypeCrossReference_0()); 
	    }
		ruleEscapableId		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFixedType
entryRuleFixedType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedTypeRule()); }
	 iv_ruleFixedType=ruleFixedType 
	 { $current=$iv_ruleFixedType.current; } 
	 EOF 
;

// Rule FixedType
ruleFixedType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fixed' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFixedTypeAccess().getFixedKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFixedTypeAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFixedTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFixedTypeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_size_3_0=RULE_INT
		{
			newLeafNode(lv_size_3_0, grammarAccess.getFixedTypeAccess().getSizeINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFixedTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_3_0, 
        		"INT");
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFixedTypeAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFixedTypeAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleEnumType
entryRuleEnumType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumTypeRule()); }
	 iv_ruleEnumType=ruleEnumType 
	 { $current=$iv_ruleEnumType.current; } 
	 EOF 
;

// Rule EnumType
ruleEnumType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumTypeAccess().getEnumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumTypeAccess().getNameEscapableIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEscapableId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EscapableId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_literals_3_0=RULE_ID
		{
			newLeafNode(lv_literals_3_0, grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"literals",
        		lv_literals_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumTypeAccess().getCommaKeyword_4_0());
    }
(
(
		lv_literals_5_0=RULE_ID
		{
			newLeafNode(lv_literals_5_0, grammarAccess.getEnumTypeAccess().getLiteralsIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumTypeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"literals",
        		lv_literals_5_0, 
        		"ID");
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getNameANParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"AN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getValuesValuesParserRuleCall_1_1_0()); 
	    }
		lv_values_2_0=ruleValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Values");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleValues
entryRuleValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuesRule()); }
	 iv_ruleValues=ruleValues 
	 { $current=$iv_ruleValues.current; } 
	 EOF 
;

// Rule Values
ruleValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuesAccess().getValuesAction_0(),
            $current);
    }
)(((	'[' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getValuesAccess().getValueArrayParserRuleCall_1_0_0()); 
	    }
		lv_value_1_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuesRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_0_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuesRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuesAccess().getValueValueParserRuleCall_1_1_1_1_0()); 
	    }
		lv_value_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuesRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*))*)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'[' 
)=>	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAccess().getValuesValuesParserRuleCall_1_0()); 
	    }
		lv_values_1_0=ruleValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRule());
	        }
       		set(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"Values");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	'[' 
)=>
    { 
        newCompositeNode(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); 
    }
    this_Array_1=ruleArray
    { 
        $current = $this_Array_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntValueParserRuleCall_2()); 
    }
    this_IntValue_2=ruleIntValue
    { 
        $current = $this_IntValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNullParserRuleCall_3()); 
    }
    this_Null_3=ruleNull
    { 
        $current = $this_Null_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullRule()); }
	 iv_ruleNull=ruleNull 
	 { $current=$iv_ruleNull.current; } 
	 EOF 
;

// Rule Null
ruleNull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'null' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getNullAccess().getValNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "null");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_STRING
		{
			newLeafNode(lv_val_0_0, grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_val_0_1=RULE_INT
		{
			newLeafNode(lv_val_0_1, grammarAccess.getIntValueAccess().getValINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_1, 
        		"INT");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntValueAccess().getValNegativeIntParserRuleCall_0_1()); 
	    }
		lv_val_0_2=ruleNegativeInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntValueRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_2, 
        		"NegativeInt");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleEscapableId
entryRuleEscapableId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEscapableIdRule()); } 
	 iv_ruleEscapableId=ruleEscapableId 
	 { $current=$iv_ruleEscapableId.current.getText(); }  
	 EOF 
;

// Rule EscapableId
ruleEscapableId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEscapableIdAccess().getIDTerminalRuleCall_0()); 
    }

    |(
	kw='`' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEscapableIdAccess().getReservedKeyWordsParserRuleCall_1_1()); 
    }
    this_ReservedKeyWords_2=ruleReservedKeyWords    {
		$current.merge(this_ReservedKeyWords_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='`' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEscapableIdAccess().getGraveAccentKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleReservedKeyWords
entryRuleReservedKeyWords returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReservedKeyWordsRule()); } 
	 iv_ruleReservedKeyWords=ruleReservedKeyWords 
	 { $current=$iv_ruleReservedKeyWords.current.getText(); }  
	 EOF 
;

// Rule ReservedKeyWords
ruleReservedKeyWords returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='record' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getRecordKeyword_0()); 
    }

    |
	kw='fixed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getFixedKeyword_1()); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getEnumKeyword_2()); 
    }

    |
	kw='map' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getMapKeyword_3()); 
    }

    |
	kw='array' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getArrayKeyword_4()); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getUnionKeyword_5()); 
    }

    |
	kw='error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getErrorKeyword_6()); 
    }

    |
	kw='protocol' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getProtocolKeyword_7()); 
    }

    |
	kw='oneway' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getOnewayKeyword_8()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getImportKeyword_9()); 
    }

    |
	kw='throws' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReservedKeyWordsAccess().getThrowsKeyword_10()); 
    }
)
    ;





// Entry rule entryRuleAN
entryRuleAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getANRule()); } 
	 iv_ruleAN=ruleAN 
	 { $current=$iv_ruleAN.current.getText(); }  
	 EOF 
;

// Rule AN
ruleAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANAccess().getCommercialAtKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getANAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANAccess().getHyphenMinusKeyword_2_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getANAccess().getIDTerminalRuleCall_2_1()); 
    }
)*)
    ;





// Entry rule entryRuleNegativeInt
entryRuleNegativeInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegativeIntRule()); } 
	 iv_ruleNegativeInt=ruleNegativeInt 
	 { $current=$iv_ruleNegativeInt.current.getText(); }  
	 EOF 
;

// Rule NegativeInt
ruleNegativeInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNegativeIntAccess().getHyphenMinusKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNegativeIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule ImportType
ruleImportType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='idl' 
	{
        $current = grammarAccess.getImportTypeAccess().getIDLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getImportTypeAccess().getIDLEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protocol' 
	{
        $current = grammarAccess.getImportTypeAccess().getPROTOCOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getImportTypeAccess().getPROTOCOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='schema' 
	{
        $current = grammarAccess.getImportTypeAccess().getSCHEMAEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getImportTypeAccess().getSCHEMAEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


