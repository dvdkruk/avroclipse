/*
 * generated by Xtext
 */
package avroclipse.serializer;

import avroclipse.avdl.Annotation;
import avroclipse.avdl.Argument;
import avroclipse.avdl.Array;
import avroclipse.avdl.ArrayFieldType;
import avroclipse.avdl.AvdlFile;
import avroclipse.avdl.AvdlPackage;
import avroclipse.avdl.CustomTypeLink;
import avroclipse.avdl.EnumType;
import avroclipse.avdl.ErrorType;
import avroclipse.avdl.Field;
import avroclipse.avdl.FixedType;
import avroclipse.avdl.Import;
import avroclipse.avdl.IntValue;
import avroclipse.avdl.MapFieldType;
import avroclipse.avdl.Null;
import avroclipse.avdl.PrimativeTypeLink;
import avroclipse.avdl.Protocol;
import avroclipse.avdl.RPCMessage;
import avroclipse.avdl.RecordType;
import avroclipse.avdl.SimpleFieldType;
import avroclipse.avdl.StringValue;
import avroclipse.avdl.TypeDef;
import avroclipse.avdl.UnionFieldType;
import avroclipse.avdl.Values;
import avroclipse.avdl.VoidTypeLink;
import avroclipse.services.AvdlGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AvdlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AvdlGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == AvdlPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AvdlPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case AvdlPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case AvdlPackage.ARRAY:
				sequence_Array(context, (Array) semanticObject); 
				return; 
			case AvdlPackage.ARRAY_FIELD_TYPE:
				sequence_ArrayFieldType(context, (ArrayFieldType) semanticObject); 
				return; 
			case AvdlPackage.AVDL_FILE:
				sequence_AvdlFile(context, (AvdlFile) semanticObject); 
				return; 
			case AvdlPackage.CUSTOM_TYPE_LINK:
				sequence_CustomTypeLink(context, (CustomTypeLink) semanticObject); 
				return; 
			case AvdlPackage.ENUM_TYPE:
				sequence_EnumType(context, (EnumType) semanticObject); 
				return; 
			case AvdlPackage.ERROR_TYPE:
				sequence_ErrorType(context, (ErrorType) semanticObject); 
				return; 
			case AvdlPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case AvdlPackage.FIXED_TYPE:
				sequence_FixedType(context, (FixedType) semanticObject); 
				return; 
			case AvdlPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AvdlPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case AvdlPackage.MAP_FIELD_TYPE:
				sequence_MapFieldType(context, (MapFieldType) semanticObject); 
				return; 
			case AvdlPackage.NULL:
				sequence_Null(context, (Null) semanticObject); 
				return; 
			case AvdlPackage.PRIMATIVE_TYPE_LINK:
				sequence_PrimativeTypeLink(context, (PrimativeTypeLink) semanticObject); 
				return; 
			case AvdlPackage.PROTOCOL:
				sequence_Protocol(context, (Protocol) semanticObject); 
				return; 
			case AvdlPackage.RPC_MESSAGE:
				sequence_RPCMessage(context, (RPCMessage) semanticObject); 
				return; 
			case AvdlPackage.RECORD_TYPE:
				sequence_RecordType(context, (RecordType) semanticObject); 
				return; 
			case AvdlPackage.SIMPLE_FIELD_TYPE:
				sequence_SimpleFieldType(context, (SimpleFieldType) semanticObject); 
				return; 
			case AvdlPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case AvdlPackage.TYPE_DEF:
				sequence_TypeDef(context, (TypeDef) semanticObject); 
				return; 
			case AvdlPackage.UNION_FIELD_TYPE:
				sequence_UnionFieldType(context, (UnionFieldType) semanticObject); 
				return; 
			case AvdlPackage.VALUES:
				sequence_Values(context, (Values) semanticObject); 
				return; 
			case AvdlPackage.VOID_TYPE_LINK:
				sequence_VoidTypeLink(context, (VoidTypeLink) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=AN values=Values?)
	 */
	protected void sequence_Annotation(EObject context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=TypeLink name=EscapableId default=Value?)
	 */
	protected void sequence_Argument(EObject context, Argument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotation=Annotation? type=TypeLink)
	 */
	protected void sequence_ArrayFieldType(EObject context, ArrayFieldType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     values=Values
	 */
	protected void sequence_Array(EObject context, Array semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.ARRAY__VALUES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.ARRAY__VALUES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getArrayAccess().getValuesValuesParserRuleCall_1_0(), semanticObject.getValues());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (imports+=Import | protocols+=Protocol)*
	 */
	protected void sequence_AvdlFile(EObject context, AvdlFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     target=[Type|EscapableId]
	 */
	protected void sequence_CustomTypeLink(EObject context, CustomTypeLink semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.CUSTOM_TYPE_LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.CUSTOM_TYPE_LINK__TARGET));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCustomTypeLinkAccess().getTargetTypeEscapableIdParserRuleCall_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=EscapableId literals+=ID literals+=ID*)
	 */
	protected void sequence_EnumType(EObject context, EnumType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EscapableId fields+=Field*)
	 */
	protected void sequence_ErrorType(EObject context, ErrorType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* type=FieldType nameAnnotations+=Annotation* name=EscapableId default=Value?)
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EscapableId size=INT)
	 */
	protected void sequence_FixedType(EObject context, FixedType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.TYPE__NAME));
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.FIXED_TYPE__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.FIXED_TYPE__SIZE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFixedTypeAccess().getNameEscapableIdParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFixedTypeAccess().getSizeINTTerminalRuleCall_3_0(), semanticObject.getSize());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=ImportType importUri=STRING)
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.IMPORT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.IMPORT__TYPE));
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.IMPORT__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.IMPORT__IMPORT_URI));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getTypeImportTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getImportAccess().getImportUriSTRINGTerminalRuleCall_2_0(), semanticObject.getImportUri());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (val=INT | val=NegativeInt)
	 */
	protected void sequence_IntValue(EObject context, IntValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotation=Annotation? type=TypeLink)
	 */
	protected void sequence_MapFieldType(EObject context, MapFieldType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val='null'
	 */
	protected void sequence_Null(EObject context, Null semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.NULL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.NULL__VAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNullAccess().getValNullKeyword_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         target='null' | 
	 *         target='int' | 
	 *         target='long' | 
	 *         target='float' | 
	 *         target='double' | 
	 *         target='bytes' | 
	 *         target='string'
	 *     )
	 */
	protected void sequence_PrimativeTypeLink(EObject context, PrimativeTypeLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* name=EscapableId elements+=Element*)
	 */
	protected void sequence_Protocol(EObject context, Protocol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (returnType=ReturnTypeLink name=EscapableId (arguments+=Argument arguments+=Argument*)* error=[ErrorType|EscapableId]? oneway?='oneway'?)
	 */
	protected void sequence_RPCMessage(EObject context, RPCMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EscapableId fields+=Field*)
	 */
	protected void sequence_RecordType(EObject context, RecordType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=TypeLink
	 */
	protected void sequence_SimpleFieldType(EObject context, SimpleFieldType semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.SIMPLE_FIELD_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.SIMPLE_FIELD_TYPE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSimpleFieldTypeAccess().getTypeTypeLinkParserRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_StringValue(EObject context, StringValue semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.STRING_VALUE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.STRING_VALUE__VAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStringValueAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* type=Type)
	 */
	protected void sequence_TypeDef(EObject context, TypeDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (types+=TypeLink types+=TypeLink*)
	 */
	protected void sequence_UnionFieldType(EObject context, UnionFieldType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((value+=Array | (value+=Value value+=Value*))*)
	 */
	protected void sequence_Values(EObject context, Values semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     target='void'
	 */
	protected void sequence_VoidTypeLink(EObject context, VoidTypeLink semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, AvdlPackage.Literals.VOID_TYPE_LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AvdlPackage.Literals.VOID_TYPE_LINK__TARGET));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVoidTypeLinkAccess().getTargetVoidKeyword_0(), semanticObject.getTarget());
		feeder.finish();
	}
}
